"use strict";angular.module("keta.filters.Unit",[]).filter("unit",function($filter,ketaSharedConfig){return function(input,configuration){var precision=0,unit="",isBytes=!1;angular.isDefined(configuration)&&(precision=angular.isNumber(configuration.precision)?configuration.precision:precision,unit=angular.isDefined(configuration.unit)?configuration.unit:unit,isBytes=angular.isDefined(configuration.isBytes)?configuration.isBytes:isBytes),0===input&&(precision=0);var sizes=isBytes?["Bytes","KB","MB","GB","TB"]:["","k","M","G","T"];if(unit===ketaSharedConfig.UNITS.EURO||unit===ketaSharedConfig.UNITS.KILOMETER||unit===ketaSharedConfig.UNITS.DOLLAR||unit===ketaSharedConfig.UNITS.POUND)return $filter("number")(input,precision)+" "+unit;if(angular.isNumber(input)){var multiplicator=0>input?-1:1,oneKiloByte=1024,oneKilo=1e3,parseBase=10;if(input*=multiplicator,input>=1){var i=parseInt(Math.floor(Math.log(input)/Math.log(isBytes?oneKiloByte:oneKilo)),parseBase);input=$filter("number")(input/Math.pow(isBytes?oneKiloByte:oneKilo,i)*multiplicator,precision),input+=" "+sizes[i]}else input=$filter("number")(input,precision)+" "+sizes[0];isBytes||(input+=unit)}return input.trim()}});
//# sourceMappingURL=unit.min.js.map