"use strict";angular.module("keta.services.AccessToken",["keta.services.AppContext"]).factory("AccessToken",function($http,AppContext){var accessToken=AppContext.get("oauth.accessToken"),api={get:function(){return accessToken},set:function(token){angular.isDefined(token)&&angular.isString(token)&&(accessToken=token)},refresh:function(){return $http({method:"GET",url:"/refreshAccessToken"})}};return api}),angular.module("keta.services.AppContext",[]).provider("AppContext",function(){var appContext=angular.isDefined(window.appContext)?window.appContext:{};this.get=function(key){var obj=appContext;key=key.split(".");for(var i=0,l=key.length;l>i;i++){if(!angular.isDefined(obj[key[i]]))return null;obj=obj[key[i]]}return obj},this.$get=function(){var api={get:this.get};return api}}),angular.module("keta.services.DeviceEvent",[]).provider("DeviceEvent",function(){this.$get=function(){var DeviceEventInstance=function(givenType,givenDevice){var that=this,type=givenType;that.getType=function(){return type};var device=givenDevice;that.getDevice=function(){return device}},api={CREATED:"CREATED",UPDATED:"UPDATED",DELETED:"DELETED",create:function(type,device){return new DeviceEventInstance(type,device)}};return api}}),angular.module("keta.services.DeviceSet",["keta.services.Device","keta.services.DeviceEvent","keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("DeviceSet",function(){this.$get=function($q,$rootScope,$log,Device,DeviceEvent,EventBusDispatcher,EventBusManager){var DeviceSetInstance=function(givenEventBus){var that=this,eventBus=givenEventBus,params={};that.filter=function(filter){return params.filter=filter,that},that.project=function(projection){return params.projection=projection,that},that.sort=function(sorting){return params.sorting=sorting,that},that.paginate=function(pagination){return angular.isDefined(pagination)&&(angular.isDefined(pagination.offset)&&(params.offset=pagination.offset),angular.isDefined(pagination.limit)&&(params.limit=pagination.limit)),that},that.query=function(){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"devices",{action:"getDevices",params:params},function(reply){reply?(reply.params=params,200===reply.code?(angular.isDefined(reply.result)&&angular.isDefined(reply.result.items)&&angular.forEach(reply.result.items,function(item,index){reply.result.items[index]=Device.create(eventBus,item)}),EventBusManager.inDebugMode()&&$log.request([{action:"getDevices",params:params},reply],$log.ADVANCED_FORMATTER),deferred.resolve(reply),$rootScope.$digest()):deferred.reject(reply)):deferred.reject("Something bad happened. Got no reply.")}),deferred.promise}},api={create:function(eventBus){return new DeviceSetInstance(eventBus)},indexOf:function(set,device){var index=-1;return angular.forEach(set.result.items,function(item,key){item.guid===device.guid&&(index=key)}),index},length:function(set){return angular.isDefined(set.result.items)?set.result.items.length:0},get:function(set,index){return angular.isDefined(set.result.items[index])?set.result.items[index]:null},getAll:function(set){return angular.isDefined(set.result.items)?set.result.items:[]},sync:function(set,event){if(event.getType()===DeviceEvent.CREATED)set.result.items.push(event.getDevice());else if(event.getType()===DeviceEvent.DELETED)set.result.items.splice(api.indexOf(set,event.getDevice()),1);else if(event.getType()===DeviceEvent.UPDATED){var index=api.indexOf(set,event.getDevice());-1!==index&&angular.extend(api.get(set,index),event.getDevice())}}};return api}}),angular.module("keta.services.Device",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("Device",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var DeviceInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)});var sendMessage=function(message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"devices",message,function(reply){EventBusManager.inDebugMode()&&$log.request([message,reply],$log.ADVANCED_FORMATTER),200===reply.code?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise};that.update=function(){var changes={tagValues:{}};if(angular.forEach(that.tagValues,function(tagValue,tagName){angular.equals(that.tagValues[tagName].value,that.$pristine.tagValues[tagName].value)||(changes.tagValues[tagName]={},changes.tagValues[tagName].value=tagValue.value,changes.tagValues[tagName].oca=tagValue.oca)}),Object.keys(changes.tagValues).length){var deferred=$q.defer();return sendMessage({action:"updateDevice",params:{deviceId:that.guid},body:changes}).then(function(reply){angular.forEach(that.$pristine,function(value,key){that.$pristine[key]=angular.copy(that[key])}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that["delete"]=function(){return sendMessage({action:"deleteDevice",params:{deviceId:that.guid}})}},api={create:function(eventBus,properties){return new DeviceInstance(eventBus,properties)}};return api}}),angular.module("keta.services.EventBusDispatcher",["keta.services.AccessToken"]).provider("EventBusDispatcher",function(){this.$get=function($window,$timeout,AccessToken){var waitForOpen=function(eventBus,success,error){if($timeout(function(){error()},1e3*eventBus.getConfig().requestTimeout),1!==eventBus.getInstance().readyState()){var onopen=null;angular.isFunction(eventBus.getInstance().onopen)&&(onopen=eventBus.getInstance().onopen),eventBus.getInstance().onopen=function(){angular.isFunction(onopen)&&onopen(),success()}}else success()},api={STATE_CONNECTING:0,STATE_OPEN:1,STATE_CLOSING:2,STATE_CLOSED:3,RESPONSE_CODE_OK:200,RESPONSE_MESSAGE_OK:"OK",RESPONSE_CODE_BAD_REQUEST:400,RESPONSE_MESSAGE_BAD_REQUEST:"Bad Request",RESPONSE_CODE_UNAUTHORIZED:401,RESPONSE_MESSAGE_UNAUTHORIZED:"Unauthorized",RESPONSE_CODE_NOT_FOUND:404,RESPONSE_MESSAGE_NOT_FOUND:"Not Found",RESPONSE_CODE_REQUEST_TIMEOUT:408,RESPONSE_MESSAGE_REQUEST_TIMEOUT:"Request Time-out",RESPONSE_CODE_AUTHENTICATION_TIMEOUT:419,RESPONSE_MESSAGE_AUTHENTICATION_TIMEOUT:"Authentication Timeout",RESPONSE_CODE_INTERNAL_SERVER_ERROR:500,RESPONSE_MESSAGE_INTERNAL_SERVER_ERROR:"Internal Server Error",RESPONSE_CODE_SERVICE_UNAVAILABLE:503,RESPONSE_MESSAGE_SERVICE_UNAVAILABLE:"Service Unavailable",send:function(eventBus,address,message,replyHandler){message.accessToken=AccessToken.get();var handler=function(reply){reply&&419===reply.code?AccessToken.refresh().then(function(response){angular.isDefined(response.data.accessToken)?(AccessToken.set(response.data.accessToken),api.send(eventBus,address,message,replyHandler)):$window.location.reload()},function(){$window.location.reload()}):angular.isFunction(replyHandler)&&replyHandler(reply)};angular.isDefined(replyHandler)&&angular.isFunction(replyHandler)?waitForOpen(eventBus,function(){eventBus.getInstance().send(address,message,handler)},function(){replyHandler({code:408,message:"Request Time-out"})}):eventBus.getInstance().send(address,message,handler)},publish:function(eventBus,address,message){message.accessToken=AccessToken.get(),waitForOpen(eventBus,function(){eventBus.getInstance().publish(address,message)})},registerHandler:function(eventBus,address,handler){waitForOpen(eventBus,function(){eventBus.getInstance().registerHandler(address,handler)})},unregisterHandler:function(eventBus,address,handler){waitForOpen(eventBus,function(){eventBus.getInstance().unregisterHandler(address,handler)})},close:function(eventBus){eventBus.getInstance().close()},readyState:function(eventBus){return eventBus.getInstance().readyState()},generateUUID:function(){var HEX_RANGE=16,BIT_HALF=8,BIT_SHIFT=3;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(a,b){return b=Math.random()*HEX_RANGE,("y"===a?b&BIT_SHIFT|BIT_HALF:0|b).toString(HEX_RANGE)})}};return api}}),angular.module("keta.services.EventBusManager",[]).provider("EventBusManager",function(){var that=this,eventBuses={},debug=!1;this.add=function(eventBus){return eventBuses[eventBus.getConfig().id]=eventBus,that},this.remove=function(eventBus){return angular.isDefined(eventBuses[eventBus.getConfig().id])&&delete eventBuses[eventBus.getConfig().id],that},this.removeAll=function(){return eventBuses={},that},this.get=function(eventBusId){return angular.isDefined(eventBuses[eventBusId])?eventBuses[eventBusId]:null},this.getAll=function(){return eventBuses},this.enableDebug=function(){debug=!0},this.disableDebug=function(){debug=!1},this.inDebugMode=function(){return debug===!0},this.$get=function(){var api={add:this.add,remove:this.remove,removeAll:this.removeAll,get:this.get,getAll:this.getAll,enableDebug:this.enableDebug,disableDebug:this.disableDebug,inDebugMode:this.inDebugMode};return api}}),angular.module("keta.services.EventBus",[]).provider("EventBus",function(){var EventBus=function(givenConfig){var DEFAULT_CONFIG={id:"kiwibus",url:"https://localhost:10443/kiwibus",reconnect:!0,reconnectTimeout:5,autoConnect:!1,autoUnregister:!0,requestTimeout:10};this.getDefaultConfig=function(){return DEFAULT_CONFIG};var config=angular.extend({},DEFAULT_CONFIG,givenConfig);this.getConfig=function(){return config};var eb=null;this.getInstance=function(){return eb};var init=function(){eb=new vertx.EventBus(config.url),eb.onclose=function(){config.reconnect&&window.setTimeout(function(){init()},1e3*config.reconnectTimeout)}};init()};this.create=function(config){return new EventBus(config)},this.$get=function(){}}),angular.module("keta.services.Logger",[]).config(function($provide){$provide.decorator("$log",function($delegate){return $delegate.ADVANCED_FORMATTER=function(messages){angular.isArray(messages)||(messages=[messages]);var output="%c["+(new Date).toISOString()+"]\n%c";angular.forEach(messages,function(message){output+=JSON.stringify(message,null,"	")+"\n"}),console.log(output,"color:#acbf2f;font-weight:bold;","color:#333;font-weight:normal;")},$delegate.request=function(messages,formatter){angular.isDefined(formatter)&&angular.isFunction(formatter)?formatter(messages):console.log(messages)},$delegate.event=function(messages,formatter){$delegate.request(messages,formatter)},$delegate})}),angular.module("keta.services.TagSet",["keta.services.Tag"]).provider("TagSet",function(){this.$get=function(){var TagSetInstance=function(){var that=this,tags=[],tagsAsHierarchy={};that.getTags=function(){return tags},that.getTagsAsHierarchy=function(){return tagsAsHierarchy},that.add=function(tag){return angular.isDefined(tagsAsHierarchy[tag.getGuid()])&&angular.isDefined(tagsAsHierarchy[tag.getGuid()][tag.getName()])||(angular.isDefined(tagsAsHierarchy[tag.getGuid()])||(tagsAsHierarchy[tag.getGuid()]={}),tagsAsHierarchy[tag.getGuid()][tag.getName()]=tag,tags.push(tag)),that},that.remove=function(tag){return angular.isDefined(tagsAsHierarchy[tag.getGuid()][tag.getName()])&&(delete tagsAsHierarchy[tag.getGuid()][tag.getName()],0===Object.keys(tagsAsHierarchy[tag.getGuid()]).length&&delete tagsAsHierarchy[tag.getGuid()],tags.splice(tags.indexOf(tag),1)),that}},api={create:function(){return new TagSetInstance}};return api}}),angular.module("keta.services.Tag",[]).provider("Tag",function(){this.$get=function(){var TagInstance=function(properties){var guid=angular.isDefined(properties.guid)?properties.guid:null;this.getGuid=function(){return guid};var name=angular.isDefined(properties.name)?properties.name:null;this.getName=function(){return name};var sampleRate=angular.isDefined(properties.sampleRate)&&properties.sampleRate>=5?properties.sampleRate:null;this.getSampleRate=function(){return sampleRate}},api={create:function(properties){return new TagInstance(properties)}};return api}});
//# sourceMappingURL=keta.min.js.map