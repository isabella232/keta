"use strict";angular.module("keta.services.Device",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).constant("DeviceConstants",{STATE:{OK:"OK",ERROR:"ERROR",FATAL:"FATAL"},CLASS:{ENERGY_MANAGER:"com.kiwigrid.devices.em.EnergyManager",LOCATION:"com.kiwigrid.devices.location.Location",PV_PLANT:"com.kiwigrid.devices.pvplant.PVPlant"},ICON:{"com.kiwigrid.devices.batteryconverter.BatteryConverter":"kiwigrid-device-icon-battery-converter","com.kiwigrid.devices.plug.Plug":"kiwigrid-device-icon-plug","com.kiwigrid.devices.powermeter.PowerMeter":"kiwigrid-device-icon-plug","com.kiwigrid.devices.windturbine.WindTurbine":"kiwigrid-device-icon-wind-turbine","com.kiwigrid.devices.sensor.TemperatureSensor":"kiwigrid-device-icon-temperature-sensor","com.kiwigrid.devices.inverter.Inverter":"kiwigrid-device-icon-inverter","com.kiwigrid.devices.heatpump.HeatPump":"kiwigrid-device-icon-smart-heat-pump","com.kiwigrid.devices.microchp.MicroChpSystem":"kiwigrid-device-icon-micro-combined-heat-pump","com.kiwigrid.devices.ripplecontrolreceiver.RippleControlReceiver":"kiwigrid-device-icon-ripple-control-receiver","com.kiwigrid.devices.smartheatpumps.SmartHeatPumps":"kiwigrid-device-icon-smart-heat-pump","com.kiwigrid.devices.pvplant.PVPlant":"kiwigrid-device-icon-pv-plant"}}).provider("Device",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var DeviceInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)});var sendMessage=function(message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"deviceservice",message,function(reply){EventBusManager.inDebugMode()&&$log.request(["deviceservice",message,reply],$log.ADVANCED_FORMATTER),reply.code===EventBusDispatcher.RESPONSE_CODE_OK?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise};that.$update=function(){var changes={tagValues:{}};if(angular.forEach(that.tagValues,function(tagValue,tagName){angular.isDefined(that.$pristine.tagValues[tagName])&&angular.equals(that.tagValues[tagName].value,that.$pristine.tagValues[tagName].value)||(changes.tagValues[tagName]={},changes.tagValues[tagName].value=tagValue.value,changes.tagValues[tagName].oca=tagValue.oca)}),Object.keys(changes.tagValues).length){var deferred=$q.defer();return sendMessage({action:"mergeDevice",params:{deviceId:that.guid},body:changes}).then(function(reply){angular.isDefined(reply.result)&&angular.isDefined(reply.result.value)&&angular.isDefined(reply.result.value.tagValues)&&angular.forEach(reply.result.value.tagValues,function(tag){angular.isDefined(that.tagValues[tag.tagName])&&(that.$pristine.tagValues[tag.tagName]=angular.copy(that.tagValues[tag.tagName]))}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that.$delete=function(){return sendMessage({action:"deleteDevice",params:{deviceId:that.guid}})},that.$reset=function(){angular.forEach(that,function(value,key){angular.isFunction(value)||"$pristine"===key||delete that[key]}),angular.forEach(that.$pristine,function(value,key){that[key]=angular.copy(value)})}},api={create:function(eventBus,properties){return new DeviceInstance(eventBus,properties)}};return api}});
//# sourceMappingURL=device.min.js.map