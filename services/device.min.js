"use strict";angular.module("keta.services.Device",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("Device",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var DeviceInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)});var sendMessage=function(message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"devices",message,function(reply){EventBusManager.inDebugMode()&&$log.request([message,reply],$log.ADVANCED_FORMATTER),200===reply.code?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise},findDeviceClass=function(deviceModel,deviceClassesArray){if(angular.isDefined(deviceModel)&&angular.isDefined(deviceModel.deviceClass)){var parts=deviceModel.deviceClass.split("~");deviceClassesArray.push({deviceClass:parts[0],version:parts[1]}),angular.isDefined(deviceModel.superclasses)&&angular.isArray(deviceModel.superclasses)&&deviceModel.superclasses.length>0&&angular.forEach(deviceModel.superclasses,function(superclass){findDeviceClass(superclass,deviceClassesArray)})}return deviceClassesArray};that.update=function(){var changes={tagValues:{}};if(angular.forEach(that.tagValues,function(tagValue,tagName){angular.equals(that.tagValues[tagName].value,that.$pristine.tagValues[tagName].value)||(changes.tagValues[tagName]={},changes.tagValues[tagName].value=tagValue.value,changes.tagValues[tagName].oca=tagValue.oca)}),Object.keys(changes.tagValues).length){var deferred=$q.defer();return sendMessage({action:"updateDevice",params:{deviceId:that.guid},body:changes}).then(function(reply){angular.forEach(that.$pristine,function(value,key){that.$pristine[key]=angular.copy(that[key])}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that["delete"]=function(){return sendMessage({action:"deleteDevice",params:{deviceId:that.guid}})},that.getDeviceClasses=function(){var deviceClasses=[];return angular.isDefined(that.deviceModel)&&(deviceClasses=findDeviceClass(that.deviceModel,deviceClasses)),deviceClasses}},api={create:function(eventBus,properties){return new DeviceInstance(eventBus,properties)}};return api}});
//# sourceMappingURL=device.min.js.map