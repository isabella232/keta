"use strict";angular.module("keta.services.Device",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("Device",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var DeviceInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)});var sendMessage=function(message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"deviceservice",message,function(reply){EventBusManager.inDebugMode()&&$log.request(["deviceservice",message,reply],$log.ADVANCED_FORMATTER),reply.code===EventBusDispatcher.RESPONSE_CODE_OK?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise};that.$update=function(){var changes={tagValues:{}};if(angular.forEach(that.tagValues,function(tagValue,tagName){angular.isDefined(that.$pristine.tagValues[tagName])&&angular.equals(that.tagValues[tagName].value,that.$pristine.tagValues[tagName].value)||(changes.tagValues[tagName]={},changes.tagValues[tagName].value=tagValue.value,changes.tagValues[tagName].oca=tagValue.oca)}),Object.keys(changes.tagValues).length){var deferred=$q.defer();return sendMessage({action:"mergeDevice",params:{deviceId:that.guid},body:changes}).then(function(reply){angular.isDefined(reply.result)&&angular.isDefined(reply.result.value)&&angular.isDefined(reply.result.value.tagValues)&&angular.forEach(reply.result.value.tagValues,function(tag){angular.isDefined(that.tagValues[tag.tagName])&&(that.$pristine.tagValues[tag.tagName]=angular.copy(that.tagValues[tag.tagName]))}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that.$delete=function(){return sendMessage({action:"deleteDevice",params:{deviceId:that.guid}})}},api={create:function(eventBus,properties){return new DeviceInstance(eventBus,properties)}};return api}});
//# sourceMappingURL=device.min.js.map