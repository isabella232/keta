/**
 * keta 1.9.0
 * Build 2020-09-16T06:49:59.784Z
 *
 * Copyright Kiwigrid GmbH 2014-2020
 * http://kiwigrid.github.io/keta/
 *
 * Licensed under MIT License
 * https://raw.githubusercontent.com/kiwigrid/keta/master/LICENSE
 */
"use strict";angular.module("keta.services.DeviceSet",["keta.services.Device","keta.services.DeviceEvent","keta.services.DeviceSetPollers"]).provider("ketaDeviceSet",function(){this.$get=function($q,$rootScope,$log,$interval,ketaDevice,ketaDeviceEvent,ketaDeviceSetPollers,ketaEventBusDispatcher,ketaEventBusManager){var api,DeviceSetInstance=function(givenEventBus){var that=this,eventBus=givenEventBus,params={},registerListener=!1,set={};that.filter=function(filter){return params.filter=filter,that},that.project=function(projection){return params.projection=projection,that},that.sort=function(sorting){return params.sorting=sorting,that},that.paginate=function(pagination){return angular.isDefined(pagination)?(params.offset=angular.isDefined(pagination.offset)?pagination.offset:0,params.limit=angular.isDefined(pagination.limit)?pagination.limit:50):(params.offset=0,params.limit=50),that},that.live=function(){return registerListener=!0,that};var fetchDevices=function(replyProcessor){ketaEventBusDispatcher.send(eventBus,"deviceservice",{action:"getDevices",params:params},replyProcessor)},logFetchQueryReply=function(reply){$log.request(["deviceservice",{action:"getDevices",params:params},reply],$log.ADVANCED_FORMATTER)},compareGuids=function(thisDevice,thatDevice){return thisDevice.guid<thatDevice.guid?-1:thisDevice.guid>thatDevice.guid?1:0},addToStored=function(device){api.sync(set,ketaDeviceEvent.create(ketaDeviceEvent.CREATED,device),eventBus)},deleteFromStored=function(device){api.sync(set,ketaDeviceEvent.create(ketaDeviceEvent.DELETED,device),eventBus)},updateStored=function(device){api.sync(set,ketaDeviceEvent.create(ketaDeviceEvent.UPDATED,device),eventBus)},synchroniseChangesToStoredDevices=function(fetchQueryReply){for(var currentDevices=api.getAll(set).slice().sort(compareGuids),fetchedDevices=api.getAll(fetchQueryReply).sort(compareGuids),c=0,f=0;c<currentDevices.length&&f<fetchedDevices.length;)currentDevices[c].guid<fetchedDevices[f].guid?(deleteFromStored(currentDevices[c]),c++):currentDevices[c].guid>fetchedDevices[f].guid?(addToStored(fetchedDevices[f]),f++):angular.equals(currentDevices[c],fetchedDevices[f])?(c++,f++):(updateStored(fetchedDevices[f]),c++,f++);for(;c<currentDevices.length;c++)deleteFromStored(currentDevices[c]);for(;f<fetchedDevices.length;f++)addToStored(fetchedDevices[f])},fetchAndStoreDevices=function(){fetchDevices(function(reply){reply&&reply.code===ketaEventBusDispatcher.RESPONSE_CODE_OK?(synchroniseChangesToStoredDevices(reply),ketaEventBusManager.inDebugMode()&&logFetchQueryReply(reply)):logFetchQueryReply(reply)})},storeAndReturnFetchedDevices=function(queryReply,deferredResult){queryReply?(queryReply.params=params,queryReply.code===ketaEventBusDispatcher.RESPONSE_CODE_OK?(angular.isDefined(queryReply.result)&&angular.isDefined(queryReply.result.items)?(angular.forEach(queryReply.result.items,function(item,index){queryReply.result.items[index]=ketaDevice.create(eventBus,item)}),set=queryReply):set={},ketaEventBusManager.inDebugMode()&&logFetchQueryReply(queryReply),deferredResult.resolve(queryReply),$rootScope.$digest()):deferredResult.reject(queryReply)):deferredResult.reject("Something bad happened. Got no reply.")};that.query=function(){if(registerListener){var poller=$interval(fetchAndStoreDevices,15e3);ketaDeviceSetPollers.add(poller)}var deferred=$q.defer();return fetchDevices(function(reply){storeAndReturnFetchedDevices(reply,deferred)}),deferred.promise}};return api={create:function(eventBus){return new DeviceSetInstance(eventBus)},indexOf:function(set,device){var index=-1;return angular.isDefined(set.result)&&angular.isDefined(set.result.items)&&angular.forEach(set.result.items,function(item,key){item.guid===device.guid&&(index=key)}),index},length:function(set){return angular.isDefined(set.result)&&angular.isDefined(set.result.items)&&angular.isArray(set.result.items)?set.result.items.length:0},get:function(set,index){return angular.isDefined(set.result)&&angular.isDefined(set.result.items)&&angular.isDefined(set.result.items[index])?set.result.items[index]:null},getAll:function(set){return angular.isDefined(set.result)&&angular.isDefined(set.result.items)?set.result.items:[]},sync:function(set,event,eventBus){var modified=!1,device=ketaDevice.create(eventBus,event.getDevice());if(event.getType()===ketaDeviceEvent.CREATED)set.result.items.push(device),modified=!0;else if(event.getType()===ketaDeviceEvent.DELETED)set.result.items.splice(api.indexOf(set,device),1),modified=!0;else if(event.getType()===ketaDeviceEvent.UPDATED){var index=api.indexOf(set,device);-1!==index&&(angular.extend(api.get(set,index),device),modified=!0)}modified&&!$rootScope.$$phase&&$rootScope.$apply()}}}});
//# sourceMappingURL=device-set.min.js.map