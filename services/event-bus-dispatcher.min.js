/**
 * keta 1.9.0
 * Build 2020-09-16T06:49:59.784Z
 *
 * Copyright Kiwigrid GmbH 2014-2020
 * http://kiwigrid.github.io/keta/
 *
 * Licensed under MIT License
 * https://raw.githubusercontent.com/kiwigrid/keta/master/LICENSE
 */
"use strict";angular.module("keta.services.EventBusDispatcher",["keta.services.AccessToken","keta.services.DeviceSetPollers"]).provider("ketaEventBusDispatcher",function(){this.$get=function($window,$timeout,ketaAccessToken,ketaDeviceSetPollers){var waitForOpen=function(eventBus,replied,success,error){var timeout=null;if(replied&&(timeout=$timeout(function(){error()},1e3*eventBus.getConfig().requestTimeout)),1!==eventBus.getInstance().readyState()){var onopen=null;angular.isFunction(eventBus.getInstance().onopen)&&(onopen=eventBus.getInstance().onopen),eventBus.getInstance().onopen=function(){angular.isFunction(onopen)&&onopen(),null!==timeout&&$timeout.cancel(timeout),success()}}else $timeout.cancel(timeout),success()},api={STATE_CONNECTING:0,STATE_OPEN:1,STATE_CLOSING:2,STATE_CLOSED:3,RESPONSE_CODE_OK:200,RESPONSE_CODE_NO_CONTENT:204,RESPONSE_MESSAGE_OK:"OK",RESPONSE_CODE_BAD_REQUEST:400,RESPONSE_MESSAGE_BAD_REQUEST:"Bad Request",RESPONSE_CODE_UNAUTHORIZED:401,RESPONSE_MESSAGE_UNAUTHORIZED:"Unauthorized",RESPONSE_CODE_NOT_FOUND:404,RESPONSE_MESSAGE_NOT_FOUND:"Not Found",RESPONSE_CODE_REQUEST_TIMEOUT:408,RESPONSE_MESSAGE_REQUEST_TIMEOUT:"Request Time-out",RESPONSE_CODE_AUTHENTICATION_TIMEOUT:419,RESPONSE_MESSAGE_AUTHENTICATION_TIMEOUT:"Authentication Timeout",RESPONSE_CODE_INTERNAL_SERVER_ERROR:500,RESPONSE_MESSAGE_INTERNAL_SERVER_ERROR:"Internal Server Error",RESPONSE_CODE_SERVICE_UNAVAILABLE:503,RESPONSE_MESSAGE_SERVICE_UNAVAILABLE:"Service Unavailable",send:function(eventBus,address,message,replyHandler){"unregisterAllListeners"!==message.action&&"unregisterAllDeviceSetListeners"!==message.action||ketaDeviceSetPollers.stopAndRemoveAll(),message.accessToken=ketaAccessToken.get();var handler=function(reply){reply&&reply.code===api.RESPONSE_CODE_AUTHENTICATION_TIMEOUT?ketaAccessToken.refresh().then(function(response){angular.isDefined(response.data)&&angular.isDefined(response.data.accessToken)?(ketaAccessToken.set(response.data.accessToken),api.send(eventBus,address,message,replyHandler)):angular.isDefined(response.access_token)?(ketaAccessToken.set(response.access_token),api.send(eventBus,address,message,replyHandler)):$window.location.reload()},function(){$window.location.reload()}):angular.isFunction(replyHandler)&&replyHandler(reply?reply:{code:408,message:"Request Time-out"})},callReplyHandler=function(reply){angular.isFunction(replyHandler)&&replyHandler(reply)};eventBus.inOfflineMode()||(null!==eventBus.getInstance()?waitForOpen(eventBus,!0,function(){eventBus.getInstance().send(address,message,handler)},function(){callReplyHandler({code:408,message:"Request Time-out"})}):callReplyHandler({code:500,message:"Internal Server Error"}))},publish:function(eventBus,address,message){message.accessToken=ketaAccessToken.get(),waitForOpen(eventBus,!1,function(){eventBus.getInstance().publish(address,message)})},registerHandler:function(eventBus,address,handler){waitForOpen(eventBus,!1,function(){eventBus.getInstance().registerHandler(address,handler)})},unregisterHandler:function(eventBus,address,handler){waitForOpen(eventBus,!1,function(){eventBus.getInstance().unregisterHandler(address,handler)})},close:function(eventBus){eventBus.getInstance().close()},readyState:function(eventBus){return eventBus.getInstance().readyState()},generateUUID:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(a,b){return b=16*Math.random(),("y"===a?3&b|8:0|b).toString(16)})}};return api}});
//# sourceMappingURL=event-bus-dispatcher.min.js.map