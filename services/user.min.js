/**
 * keta 0.4.8
 * Build 2015-09-24T10:52:49.838Z
 *
 * Copyright Kiwigrid GmbH 2014-2015
 * http://kiwigrid.github.io/keta/
 *
 * Licensed under MIT License
 * https://raw.githubusercontent.com/kiwigrid/keta/master/LICENSE
 */
"use strict";angular.module("keta.services.User",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("User",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var sendMessage=function(eventBus,message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"userservice",message,function(reply){EventBusManager.inDebugMode()&&$log.request(["userservice",message,reply],$log.ADVANCED_FORMATTER),reply.code===EventBusDispatcher.RESPONSE_CODE_OK?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise},UserInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)}),that.$create=function(){var cleanedUser={};for(var el in that)that.hasOwnProperty(el)&&!angular.isFunction(that[el])&&"$pristine"!==el&&(cleanedUser[el]=angular.copy(that[el]));return sendMessage(eventBus,{action:"createUser",params:{userId:cleanedUser.userId},body:cleanedUser})},that.$update=function(){var cleanedUser=angular.copy(that),cleanedUserOriginal=angular.copy(that.$pristine);delete cleanedUser.$pristine,delete cleanedUser.$create,delete cleanedUser.$update,delete cleanedUser.$delete,delete cleanedUser.$reset;var changes={};if(angular.forEach(cleanedUser,function(value,key){"properties"===key?!angular.isDefined(cleanedUserOriginal.properties)||null===cleanedUserOriginal.properties||angular.equals(cleanedUserOriginal.properties,{})?changes.properties=value:angular.forEach(value,function(propValue,propKey){angular.isDefined(cleanedUserOriginal.properties[propKey])&&angular.equals(cleanedUser.properties[propKey],cleanedUserOriginal.properties[propKey])||(angular.isDefined(changes.properties)||(changes.properties={}),changes.properties[propKey]=propValue)}):angular.equals(cleanedUser[key],cleanedUserOriginal[key])||(changes[key]=value)}),Object.keys(changes).length){var deferred=$q.defer();return sendMessage(eventBus,{action:"mergeUser",params:{userId:that.userId},body:changes}).then(function(reply){that.$pristine={},angular.forEach(that,function(value,key){angular.isFunction(that[key])||(that.$pristine[key]=angular.copy(that[key]))}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that.$delete=function(){return sendMessage(eventBus,{action:"deleteUser",params:{userId:that.userId}})},that.$reset=function(){angular.forEach(that,function(value,key){angular.isFunction(value)||"$pristine"===key||delete that[key]}),angular.forEach(that.$pristine,function(value,key){that[key]=angular.copy(value)})}},api={create:function(eventBus,properties){return new UserInstance(eventBus,properties)},getChannel:function(eventBus,channelId){var deferred=$q.defer();return sendMessage(eventBus,{action:"getChannel",params:{channelId:channelId}}).then(function(reply){deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise},getCurrent:function(eventBus){var deferred=$q.defer();return sendMessage(eventBus,{action:"getCurrentUser"}).then(function(reply){deferred.resolve(new UserInstance(eventBus,reply.result))},function(reply){deferred.reject(reply)}),deferred.promise}};return api}});
//# sourceMappingURL=user.min.js.map