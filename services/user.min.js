"use strict";angular.module("keta.services.User",["keta.services.EventBusDispatcher","keta.services.EventBusManager","keta.services.Logger"]).provider("User",function(){this.$get=function($q,$log,EventBusDispatcher,EventBusManager){var sendMessage=function(eventBus,message){var deferred=$q.defer();return EventBusDispatcher.send(eventBus,"userservice",message,function(reply){EventBusManager.inDebugMode()&&$log.request(["userservice",message,reply],$log.ADVANCED_FORMATTER),reply.code===EventBusDispatcher.RESPONSE_CODE_OK?deferred.resolve(reply):deferred.reject(reply)}),deferred.promise},returnRejectedPromise=function(message){var deferred=$q.defer();return deferred.reject(message),deferred.promise},UserInstance=function(givenEventBus,properties){var that=this,eventBus=givenEventBus;angular.forEach(properties,function(value,key){that[key]=value,angular.isDefined(that.$pristine)||(that.$pristine={}),that.$pristine[key]=angular.copy(value)});var findDeepChanges=function(obj1,obj2){var changes={};return angular.forEach(obj1,function(value,key){if(angular.isObject(value)&&!angular.isArray(value)){angular.isDefined(obj2[key])||(obj2[key]={});var deepChanges=findDeepChanges(obj1[key],obj2[key]);angular.equals(deepChanges,{})||(changes[key]={},angular.extend(changes[key],deepChanges))}else angular.equals(obj1[key],obj2[key])||(changes[key]=value)}),changes};that.$create=function(){var cleanedUser={};for(var el in that)that.hasOwnProperty(el)&&!angular.isFunction(that[el])&&"$pristine"!==el&&(cleanedUser[el]=angular.copy(that[el]));return sendMessage(eventBus,{action:"createUser",params:{userId:cleanedUser.userId},body:cleanedUser})},that.$update=function(){var cleanedUser=angular.copy(that),cleanedUserOriginal=angular.copy(that.$pristine);delete cleanedUser.$pristine,delete cleanedUser.$create,delete cleanedUser.$update,delete cleanedUser.$delete;var changes={};if(angular.forEach(cleanedUser,function(value,key){var objChanges={};"properties"===key?(angular.isDefined(cleanedUserOriginal[key])||(cleanedUserOriginal[key]={}),objChanges=findDeepChanges(cleanedUser[key],cleanedUserOriginal[key]),angular.equals(objChanges,{})||angular.forEach(objChanges,function(propValue,propKey){angular.isDefined(changes.properties)||(changes.properties={}),changes.properties[propKey]=cleanedUser.properties[propKey]})):(angular.isDefined(cleanedUserOriginal[key])||(cleanedUserOriginal[key]={}),angular.isObject(value)&&!angular.isArray(value)?(objChanges=findDeepChanges(cleanedUser[key],cleanedUserOriginal[key]),angular.equals(objChanges,{})||(changes[key]=value)):angular.equals(cleanedUser[key],cleanedUserOriginal[key])||(changes[key]=value))}),Object.keys(changes).length){var deferred=$q.defer();return sendMessage(eventBus,{action:"mergeUser",params:{userId:that.userId},body:changes}).then(function(reply){that.$pristine={},angular.forEach(that,function(value,key){angular.isFunction(that[key])||(that.$pristine[key]=angular.copy(that[key]))}),deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise}return returnRejectedPromise("No changes found")},that.$delete=function(){return sendMessage(eventBus,{action:"deleteUser",params:{userId:that.userId}})}},api={create:function(eventBus,properties){return new UserInstance(eventBus,properties)},getChannel:function(eventBus,channelId){var deferred=$q.defer();return sendMessage(eventBus,{action:"getChannel",params:{channelId:channelId}}).then(function(reply){deferred.resolve(reply)},function(reply){deferred.reject(reply)}),deferred.promise},getCurrent:function(eventBus){var deferred=$q.defer();return sendMessage(eventBus,{action:"getCurrentUser"}).then(function(reply){deferred.resolve(new UserInstance(eventBus,reply.result))},function(reply){deferred.reject(reply)}),deferred.promise}};return api}});
//# sourceMappingURL=user.min.js.map